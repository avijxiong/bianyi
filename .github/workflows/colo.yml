name: Build colo

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: linux
            goarch: amd64
            suffix: ""

    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.20'

    - name: Get dependencies
      working-directory: ./colo源码
      run: |
        go mod download
        go mod tidy

    - name: Build
      working-directory: ./colo源码
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: go build -v -o ../colo-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} .

    - name: Prepare complete package
      run: |
        mkdir -p colo_package
        cp colo-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} colo_package/
        cp ips-v4.txt colo_package/ || true
        cp colo/ips-v4.txt colo_package/ || true
        cp colo/ips-v6.txt colo_package/ || true
        cp colo/locations.json colo_package/ || true

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: colo-${{ github.event.inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ./colo-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}

    - name: Upload complete package
      uses: actions/upload-artifact@v4
      with:
        name: colo-${{ github.event.inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}-complete
        path: ./colo_package

  create-release:
    name: Create Release and Upload Assets
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Check if release exists
      id: check_release
      run: |
        release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.version }}" \
          | jq -r '.id')
        if [ "$release_id" != "null" ]; then
          echo "release_exists=true" >> $GITHUB_OUTPUT
          echo "release_id=$release_id" >> $GITHUB_OUTPUT
        else
          echo "release_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: steps.check_release.outputs.release_exists == 'false'
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        response=$(curl -s -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{
            "tag_name": "${{ github.event.inputs.version }}",
            "name": "Release ${{ github.event.inputs.version }}",
            "draft": false,
            "prerelease": false
          }')
        echo "release_id=$(echo $response | jq -r '.id')" >> $GITHUB_OUTPUT

    - name: Get Release ID
      id: get_release_id
      run: |
        if [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
          echo "release_id=${{ steps.check_release.outputs.release_id }}" >> $GITHUB_OUTPUT
        else
          echo "release_id=${{ steps.create_release.outputs.release_id }}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for dir in colo-${{ github.event.inputs.version }}-*; do
          if [ -d "$dir" ]; then
            for file in "$dir"/*; do
              if [ -f "$file" ]; then
                asset_name=$(basename "$file")
                if [[ $asset_name == colo-* ]]; then
                  new_asset_name="colo-${{ github.event.inputs.version }}-${asset_name#colo-}"
                else
                  new_asset_name=$asset_name
                fi
                echo "Uploading $new_asset_name"
                curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release_id.outputs.release_id }}/assets?name=$new_asset_name"
              fi
            done
          fi
        done
